 - Describe any design decisions you made, including your deadlock detection policy, locking granularity, etc.

The deadlock detection policy I used was a timeout. If a writer cannot acquire a write lock MAX_COUNT times with TIMEOUT between each trial, we give up and throw and TransactionAbortedException. Locking granulatiry was done on pages instead of tuples because that is easier to implement.


 - In part 2.3, we ask you to implement NO STEAL/FORCE buffer management policy and assume that the system won't crash while running transactionComplete. Why does NO STEAL/FORCE and no crashes while processing transactionComplete makes your job easier. In other words, what, what's complicated about implementing STEAL/NO FORCE buffer management policy and what measures do we need to take if our system could crash while running transactionComplete

If the system could crash during transactionComplete, we have to make sure the dirty pages are written out to disk. If they aren't written out to disk, then a transactionComplete will be recorded, but the data will be lost because of the crash. Because we don't have to worry about crashes during transactionComplete, we never need to worry about a page not getting written out to disk. If the system were allowed to crash during trasnactionComplete, do make sure the dirty pages get written out, we need to implement a log to log everything. From the log we can record what state we are in and implement recovery algorithms discussed in class. In particular, this would invlove rolling back the database to a certain state before the crash and re-running each step after the crash so that the pages are written out to disk. Then the database can resume normal operations.


 - What ACID properties do these simplifications above aim to guarantee?
 
 The simplification above makes transactions atomic because a transaction either completes or fails. It dosen't "complete" when theres a crash and the pages are written out to disk. It also makes transactions consistent, that is all data written to the database is correct and not currupt. If crashes were allowed, the data could be corrupt (e.g. not updated correctly). It also makes transactions isolated, that is, a crash can affect multiple transations if they were writing to disk. And lastly is makes things durable. Once a transaction is completed, the data will stay there since its written to disk and there are no crashes.


 - Discuss and justify any changes you made to the API.

 No changes were made to the API
